# git stuff
alias gits='git status && check_git_status'
alias gitp='git push && check_git_status'
alias gitall='git add -A'
alias gitcm='git commit -m'
alias gitchk='git checkout'

# vim stuff
alias :q='echo idiot'
alias :q!='echo idiot'
alias :wq='echo idiot'

# toolbox stuff
alias tbl='toolbox list'
alias tbs='toolbox start'
alias tbst='podman stop'
alias tbe='toolbox enter'
alias tbr='toolbox run -c'
alias pm='podman'

# void stuff
alias xi="xbps-install" 
alias xq="xbps-query"

alias em="emacs -nw"
alias reboot='sudo reboot'

alias rg='ranger'

alias cdr='cd ~/repos'

alias vimbg='vim -p mountainblade.c entities.h entities.c logic.h logic.c actions.h actions.c display.h display.c gtime.h gtime.c'

gitpeek() {
	# if no arguments given or if the one argument is -h/--help, show the format
	if [ "$#" -eq 0 ] || [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
		printf "%s\n" "Usage: gitpeek [account name] [repo name] [filename]"
		return
	fi
	# if the file to be peeked is within a directory, replace $3 with the path
	# requires that the main branch be named main
	result="$(curl -s https://raw.githubusercontent.com/"$1"/"$2"/main/"$3")"
	
	# if the repo is following the older naming scheme then the main branch will 
	# be called master
	if [[ $(echo "$result" | grep "404") ]]; then
		result="$(curl -s https://raw.githubusercontent.com/"$1"/"$2"/master/"$3")"
		printf "%s\n" "$result"
		return 0
	else
		# prints the original result if there's no errors
		printf "%s\n" "$result"
		return 0
	fi
}

# function for git cd function
check_git_status() {
  	git_results="$(git status)"
	if [[ $(echo "$git_results" | grep "Your branch is behind") ]]; then
		git fetch -q &
		export GITDIRSTAT="M"
		return 0
	fi
	if [[ $(echo "$git_results" | grep "Your branch is ahead") ]]; then
		export GITDIRSTAT="P"
		return 0
  	fi
  	if [[ $(echo "$git_results" | grep "have diverged") ]]; then
		export GITDIRSTAT="D"
		return 0
  	fi
  	if [[ $(echo "$git_results" | grep "Changes to be comm") ]]; then
		export GITDIRSTAT="C"
		return 0
  	fi
  	if [[ $(echo "$git_results" | grep "Changes not staged") ]]; then
		export GITDIRSTAT="U"
		return 0
  	fi
	export GITDIRSTAT=""
	return 0
}

# show git status in terminal prompt when applicable
#cd() {
#	command cd "$@" || return
#	if [ -d .git ]; then
#		check_git_status
#	else
#		export GITDIRSTAT=""
#	fi
#}
